package com.crunchify.controller;

import java.io.IOException;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import lombok.extern.slf4j.Slf4j;
	

@RestController
@CrossOrigin(origins = "http://localhost:3000")
public class CrunchifyHelloWorld {

	private RestTemplate restTemplate = new RestTemplate();

	@RequestMapping(value = "/ping", method = RequestMethod.GET)
	public String ping() throws IOException {
		return "data";
	}

	@RequestMapping("/personnes/",method = RequestMethod.POST)
	public PersonneIntellibo getPersonnes(@RequestBody SearchParameters searchParameters) throws IOException {
		final String uri2 = "http://172.19.31.20:8080/intellibo-marklogic/v2/search/account/001D000000rfR6GIAU/personnes";
		//SearchParameters params = SearchParameters.builder().maxResults(10).offset(0).query("tf1")
			//	.personneStatuses(Lists.newArrayList("ACTIVE")).build();

		PersonneIntellibo personne = restTemplate.postForObject(uri2, searchParameters, PersonneIntellibo.class);
		return personne;
	}
}
	/*
	 * @RequestMapping(value = "/users/", method = RequestMethod.POST)
    public ResponseEntity<Void> createUser(@RequestBody User user,    UriComponentsBuilder ucBuilder) {
        System.out.println("Creating User " + user.getName());
 
        if (userService.isUserExist(user)) {
            System.out.println("A User with name " + user.getName() + " already exist");
            return new ResponseEntity<Void>(HttpStatus.CONFLICT);
        }
 
        userService.saveUser(user);
 
        HttpHeaders headers = new HttpHeaders();
        headers.setLocation(ucBuilder.path("/user/{id}").buildAndExpand(user.getId()).toUri());
        return new ResponseEntity<Void>(headers, HttpStatus.CREATED);
    }
	 * 
	 * */
}